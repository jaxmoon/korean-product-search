# 검색 UI 사용 가이드

## 🚀 실행 방법

### 1. 백엔드 서버 실행 (필수)

먼저 백엔드 서버가 실행되어 있어야 합니다:

```bash
cd ../backend
npm run start:dev
```

서버가 `http://localhost:4000`에서 실행되고 있는지 확인하세요.

### 2. 프론트엔드 실행

브라우저에서 `index.html` 파일을 직접 열거나, 간단한 웹 서버를 실행하세요:

**방법 1: 파일 직접 열기**
```bash
open index.html
# Windows: start index.html
# Linux: xdg-open index.html
```

**방법 2: Python 웹 서버 (권장)**
```bash
# Python 3
python3 -m http.server 8080

# 브라우저에서 접속
# http://localhost:8080
```

**방법 3: Node.js 웹 서버**
```bash
# http-server 설치 (최초 1회)
npm install -g http-server

# 서버 실행
http-server -p 8080

# 브라우저에서 접속
# http://localhost:8080
```

---

## ✨ 주요 기능

### 1. 한국어 검색
- **형태소 분석**: "무선이어폰" → "무선" + "이어폰"으로 분해
- **조사 제거**: "노트북을" → "노트북"으로 검색
- **검색어 하이라이팅**: 일치하는 부분 노란색 강조

### 2. 필터링
- **카테고리**: 전자제품, 패션, 식품, 생활용품, 도서
- **가격 범위**: 최소/최대 가격 설정
- **정렬**: 관련도순, 가격순, 평점순

### 3. 반응형 디자인
- 모바일, 태블릿, 데스크톱 모두 지원
- 터치 스크린 최적화

### 4. 페이지네이션
- 한 페이지에 12개 상품 표시
- 이전/다음 페이지 이동

---

## 🎯 사용 예제

### 기본 검색
1. 검색창에 "삼성"을 입력
2. 검색 버튼 클릭 또는 Enter 키
3. 결과: 삼성 관련 상품 11개 표시

### 필터 적용
1. 검색어: "노트북"
2. 카테고리: "전자제품"
3. 최소 가격: 500000
4. 최대 가격: 2000000
5. 정렬: "가격 낮은순"

### 전체 상품 보기
- 검색어를 입력하지 않고 필터만 사용
- 페이지 로드 시 자동으로 전체 상품 표시

---

## 🔧 문제 해결

### CORS 에러 발생 시

백엔드에서 CORS를 허용해야 합니다.

**backend/src/main.ts** 파일 확인:
```typescript
app.enableCors({
  origin: '*', // 개발 환경에서는 모든 origin 허용
  credentials: true,
});
```

### 백엔드 연결 실패

1. 백엔드 서버 실행 확인:
   ```bash
   curl http://localhost:4000/health
   ```

2. Elasticsearch 상태 확인:
   ```bash
   curl http://localhost:9200/_cluster/health?pretty
   ```

3. 샘플 데이터 확인:
   ```bash
   curl http://localhost:9200/products/_count
   ```

### 브라우저 콘솔에서 확인

F12 키를 눌러 개발자 도구를 열고 Console 탭에서 에러 메시지를 확인하세요.

---

## 📊 API 엔드포인트

프론트엔드가 사용하는 API:

```
GET /products/search
```

**쿼리 파라미터:**
- `q`: 검색어 (예: "삼성")
- `category`: 카테고리 (예: "전자제품")
- `minPrice`: 최소 가격 (예: 100000)
- `maxPrice`: 최대 가격 (예: 500000)
- `sort`: 정렬 (예: "price:asc")
- `page`: 페이지 번호 (기본: 1)
- `pageSize`: 페이지 크기 (기본: 12)

**응답 예시:**
```json
{
  "total": 11,
  "items": [
    {
      "id": "abc123",
      "name": "삼성 갤럭시 노트북",
      "description": "프리미엄 노트북",
      "price": 1500000,
      "category": "전자제품",
      "brand": "삼성",
      "rating": 4.5,
      "reviewCount": 120,
      "stock": 50,
      "_highlight": {
        "name": ["<em>삼성</em> 갤럭시 노트북"]
      }
    }
  ],
  "page": 1,
  "pageSize": 12
}
```

---

## 🎨 커스터마이징

### 색상 변경

`index.html`의 `<style>` 섹션에서 다음 변수를 수정:

```css
/* 메인 그라데이션 배경 */
background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);

/* 메인 색상 (버튼, 강조) */
background: #667eea;

/* 하이라이트 색상 */
background: #fff3cd;
```

### 페이지 크기 변경

JavaScript 섹션의 `pageSize` 변수를 수정:

```javascript
const pageSize = 12; // 원하는 숫자로 변경 (예: 20)
```

### API URL 변경

백엔드가 다른 포트에서 실행 중이라면:

```javascript
const API_BASE_URL = 'http://localhost:4000'; // 포트 변경
```

---

## 📝 기술 스택

- **순수 HTML/CSS/JavaScript**: 프레임워크 없이 경량 구현
- **Fetch API**: 백엔드와 통신
- **CSS Grid**: 반응형 레이아웃
- **ES6+**: 최신 JavaScript 문법

---

## 🚀 다음 단계

### 추가 개발 아이디어

1. **태그 필터**: 다중 태그 선택 기능
2. **자동완성**: 검색어 입력 시 추천 단어
3. **상품 상세 모달**: 카드 클릭 시 상세 정보
4. **장바구니**: 상품 담기 기능
5. **검색 히스토리**: 최근 검색어 저장
6. **무한 스크롤**: 페이지네이션 대신 자동 로드
7. **즐겨찾기**: 관심 상품 저장

### 프레임워크로 전환

프로덕션 환경에서는 다음 프레임워크 사용 권장:

- **React**: 컴포넌트 기반 구조
- **Next.js**: SSR/SSG 지원
- **Vue.js**: 간단한 학습 곡선
- **Svelte**: 번들 크기 최소화

---

## 📞 도움말

- **Swagger UI**: http://localhost:4000/api
- **TEST_GUIDE.md**: 백엔드 테스트 가이드
- **README.md**: 프로젝트 전체 가이드
